#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Betriebssysteme
\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
Was ist ein Betriebssystem?
\end_layout

\begin_layout Enumerate
Ein Ressourcen Verwalter
\end_layout

\begin_deeper
\begin_layout Enumerate
CPU -> Reichenleistung
\end_layout

\begin_layout Enumerate
Speicher
\end_layout

\begin_layout Enumerate
I/O Geräte
\end_layout

\begin_layout Enumerate
Daten (Sekundärspeicher: Disks, FS, etc)
\end_layout

\end_deeper
\begin_layout Enumerate
Eine virtuelle Maschine
\end_layout

\begin_deeper
\begin_layout Enumerate
Schnittstelle zwischen Anwendersoftware und Hardware
\end_layout

\begin_layout Enumerate
abstrahiert von den Details der Hardware
\end_layout

\end_deeper
\begin_layout Enumerate
Anbieter von z.T standartisierten Diensten
\end_layout

\begin_layout Enumerate
Ziel: einfache und effiziente Nutzung von Rechnersystemen
\end_layout

\begin_layout Subsection
Interrupts
\end_layout

\begin_layout Subsubsection*
Quellen für Interrupts
\end_layout

\begin_layout Itemize
Asynchrone Interrupts: 
\end_layout

\begin_deeper
\begin_layout Itemize
Timer
\end_layout

\begin_layout Itemize
I/O Device
\end_layout

\begin_layout Itemize
Hardwarefehler
\end_layout

\end_deeper
\begin_layout Itemize
synchrone Interrupts:
\end_layout

\begin_deeper
\begin_layout Itemize
Programm, z.B.
 div/0
\end_layout

\begin_layout Itemize
Trap, SWI
\end_layout

\end_deeper
\begin_layout Standard
-> Bessere CPU Nutzung
\end_layout

\begin_layout Subsubsection*
System Mode - User Mode
\end_layout

\begin_layout Standard
Die meisten Prozessoren arbeiten in zwei Modi:
\end_layout

\begin_layout Itemize
System Mode
\end_layout

\begin_deeper
\begin_layout Itemize
System Mode (Kernel, Supervisor, privilegierter Mode)
\end_layout

\begin_deeper
\begin_layout Itemize
Zurgriff auf kritische Rechner-Ressourcen (Konstrollregister, I/O Instruktionen,
 Speicherverwaltung...)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
User Mode
\end_layout

\begin_deeper
\begin_layout Itemize
Zugriff auf unkritische Rechner-Ressourcen
\end_layout

\begin_deeper
\begin_layout Itemize
kein Zugriff auf Hardware (nur über BS)
\end_layout

\begin_layout Itemize
Instruktionsmenge eingeschränkt
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Speicherhierarchie
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/speicherhierarchie.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection*
Cache
\end_layout

\begin_layout Itemize
Prozessor liest Wort
\end_layout

\begin_deeper
\begin_layout Itemize
Wort im Cache --> Transfer an CPU
\end_layout

\begin_layout Itemize
Wort nicht im Cache --> Block aus Speicher mit Wort ins Cache transferieren
\end_layout

\begin_layout Itemize
transparent für Benutzer, Zusammenarbeit mit Memory Management Unit
\end_layout

\begin_layout Itemize
\begin_inset Graphics
	filename images/transfer.png
	scale 50

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection*
Lokalitätsprinzip
\end_layout

\begin_layout Standard
Wieso funktioniert Cache?
\end_layout

\begin_layout Itemize
räumliche Lokalität (spacial locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass nächster Speicherzugriff auf "nahe" liegende
 Daten stattfindet
\end_layout

\end_deeper
\begin_layout Itemize
zeitliche Lokalität (temporal locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass Speicherzugriff auf gleiches Datum nochmals
 staffindet
\end_layout

\end_deeper
\begin_layout Section
Prozesse
\end_layout

\begin_layout Standard

\noun on
Unit of Resource Ownership
\noun default
: eine Einheit, die Ressourcen besitzt, ein virtueller Adressraum, in dem
 das Prozess Image steht, Kontrolle über Ressourcen (Files, I/O Geräte,
 etc.) hat
\end_layout

\begin_layout Standard

\noun on
Unit of Scheduling
\noun default
: Eine Einheit, die schedulierbar ist.
 CPU-Scheduler weist der CPU einen Prozess zu (dispatch).
 zum Prozess gehören der Execution State (PC, SP, Register) und eine Ausführungs
priorität
\end_layout

\begin_layout Subsubsection*
Zustands-Prozessmodell
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/7state.png
	scale 65

\end_inset


\end_layout

\begin_layout Subsubsection*
Prozess und Ressourcenmanangment
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/resourcen.png

\end_inset


\end_layout

\begin_layout Itemize
Prozess Image besteht aus, ist im virtuellen Speicher (Adresse 0) abgelegt.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Benutzerprogramm (Code), Daten, Stack
\end_layout

\begin_layout Itemize
Kontext, im Prozesskontrollblock (PCB) gespeichert
\end_layout

\begin_deeper
\begin_layout Itemize
PCB, eine Datenstruktur mit Zustandsinformation zum Prozess
\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
