#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Betriebssystem
\end_layout

\begin_layout Standard
Was ist ein Betriebssystem?
\end_layout

\begin_layout Enumerate
Ein Ressourcen Verwalter (CPU -> Reichenleistung, Speicher, I/O Geräte,
 Daten (Sekundärspeicher: Disks, FS, etc))
\end_layout

\begin_layout Enumerate
Eine virtuelle Maschine (Schnittstelle zwischen Anwendersoftware und Hardware,
 abstrahiert von den Details der Hardware)
\end_layout

\begin_layout Enumerate
Anbieter von z.T standartisierten Diensten
\end_layout

\begin_layout Enumerate
Ziel: einfache und effiziente Nutzung von Rechnersystemen
\end_layout

\begin_layout Enumerate
Wichtig für BS:
\end_layout

\begin_deeper
\begin_layout Enumerate
Interrupts (erlaubt Unterbruch laufender Progamme, bessere CPU, Ausnutzung
 durch Multitasking).
\end_layout

\begin_layout Enumerate
System Calls (Schnitstelle zwischen User und Systembereich, schützt BS vor
 unerlaubtem Zugriff)
\end_layout

\begin_layout Enumerate
Speicherhierarchie (versteckt Zugriffszeiten auf Speicher, nicht-deterministisch
e Zugriffszeiten, problematisch bei Echtzeitsystemen)
\end_layout

\begin_layout Enumerate
Boot-Vorgang (Systeminitialisierung, abhängig von Komplexität des BS)
\end_layout

\end_deeper
\begin_layout Description
Batch-Systems: nur ein Job aus Batch im Speicher • Jobs werden sequentiell
 abgearbeitet • Monitor zur Steuerung, keine Interaktion mit Anwender 
\end_layout

\begin_layout Description
Multiprogrammed-Batch-Systems: mehrere Jobs im Speicher • Scheduler notwendig
 • Interrupt und Speicherverwaltung notwendig 
\end_layout

\begin_layout Description
Time-Sharing-Systems: mehrere interaktive Jobs werden "gleichzeitig" abgearbeite
t • Schutz des Filesystems und Arbeitsspeichers notwendig • Mutex (gegenseitiger
 Ausschluss) notwendig - Zugriff auf Drucker, etc.
\end_layout

\begin_layout Description
Job-Control-Language: is a scripting language used on IBM mainframe operating
 systems to instruct the system on how to run a batch job or start a subsystem.
 
\end_layout

\begin_layout Section
Interrupts
\end_layout

\begin_layout Subsubsection*
Quellen für Interrupts
\end_layout

\begin_layout Itemize
Asynchrone Interrupts: 
\end_layout

\begin_deeper
\begin_layout Itemize
Timer
\end_layout

\begin_layout Itemize
I/O Device
\end_layout

\begin_layout Itemize
Hardwarefehler
\end_layout

\end_deeper
\begin_layout Itemize
synchrone Interrupts:
\end_layout

\begin_deeper
\begin_layout Itemize
Programm, z.B.
 div/0
\end_layout

\begin_layout Itemize
Trap, SWI
\end_layout

\end_deeper
\begin_layout Standard
-> Bessere CPU Nutzung
\end_layout

\begin_layout Standard
Ablauf: • Instruktion zu Ende führen • PC, PSW, Register, etc.
 → speichern (umschalten in System Mode) • Interrupt Vektortabelle → Adresse
 der ISR • ISR Instruktionen ausführen • PC, PSW, Register, etc.
 → wiederherstellen ( umschalten in User Mode) • Instruktionen des Anwenderprogr
amms
\end_layout

\begin_layout Standard
Auslöser Trap: Software, Interrupt: Hardware
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/interrupts.png
	scale 35

\end_inset


\end_layout

\begin_layout Subsubsection*
System Mode - User Mode
\end_layout

\begin_layout Standard
Die meisten Prozessoren arbeiten in zwei Modi (Umschaltung über mode bits):
\end_layout

\begin_layout Itemize
System Mode
\end_layout

\begin_deeper
\begin_layout Itemize
System Mode (Kernel, Supervisor, privilegierter Mode)
\end_layout

\begin_deeper
\begin_layout Itemize
Zurgriff auf kritische Rechner-Ressourcen (Konstrollregister, I/O Instruktionen,
 Speicherverwaltung...)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
User Mode
\end_layout

\begin_deeper
\begin_layout Itemize
Zugriff auf unkritische Rechner-Ressourcen
\end_layout

\begin_deeper
\begin_layout Itemize
kein Zugriff auf Hardware (nur über BS)
\end_layout

\begin_layout Itemize
Instruktionsmenge eingeschränkt
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
I/O Kommunikation
\end_layout

\begin_layout Standard
3 Techniken für Kommunikation mit I/O Geräten
\end_layout

\begin_layout Itemize
Programmed I/O oder synchroner I/O
\end_layout

\begin_deeper
\begin_layout Itemize
Benötigt keine Interrupts, CPU wartet auf Beendigung jeder einzelnen Operation
\end_layout

\begin_layout Itemize
Busy wait
\end_layout

\end_deeper
\begin_layout Itemize
Interrupt Driven I/O oder asynchroner I/O
\end_layout

\begin_deeper
\begin_layout Itemize
CPU führt während I/O Operation Code aus, wird unterbrochen, wenn I/O Operation
 beendet
\end_layout

\begin_layout Itemize
CPU kann andere Arbeiten ausführen
\end_layout

\end_deeper
\begin_layout Itemize
Direct Memory Access
\end_layout

\begin_deeper
\begin_layout Itemize
ein Speicherblock mit Daten wird vom/zum Speicher übertragen ohne Rechenleistung
 der CPU zu beanspruchen
\end_layout

\end_deeper
\begin_layout Subsubsection*
Speicherhierarchie
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/speicherhierarchie.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
DMA: Direct Memory Access.
 Daten gehen nicht über CPU, CPU wird somit nicht blockiert.
\end_layout

\begin_layout Subsubsection*
Cache
\end_layout

\begin_layout Itemize
Prozessor liest Wort
\end_layout

\begin_deeper
\begin_layout Itemize
Wort im Cache --> Transfer an CPU
\end_layout

\begin_layout Itemize
Wort nicht im Cache --> Block aus Speicher mit Wort ins Cache transferieren
\end_layout

\begin_layout Itemize
transparent für Benutzer, Zusammenarbeit mit Memory Management Unit
\end_layout

\begin_layout Itemize
\begin_inset Graphics
	filename images/transfer.png
	scale 30

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection*
Lokalitätsprinzip
\end_layout

\begin_layout Standard
Wieso funktioniert Cache?
\end_layout

\begin_layout Itemize
räumliche Lokalität (spacial locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass nächster Speicherzugriff auf "nahe" liegende
 Daten stattfindet
\end_layout

\end_deeper
\begin_layout Itemize
zeitliche Lokalität (temporal locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass Speicherzugriff auf gleiches Datum nochmals
 staffindet
\end_layout

\end_deeper
\begin_layout Subsubsection*
Hit Ratio
\end_layout

\begin_layout Standard
Mittlere Zugriff 
\begin_inset Formula $T_{a}$
\end_inset

:
\end_layout

\begin_layout Verse
h = Hitrate, 1-h = Missrate, 
\begin_inset Formula $T_{M}$
\end_inset

 = Zugriffszeit auf Hauptspeicher
\end_layout

\begin_layout Verse
\begin_inset Formula $T_{a}=h\cdot T_{C}+(1-h)\cdot(T_{C}+T_{M})=T_{C}+(1-h)\cdot T_{M}$
\end_inset


\end_layout

\begin_layout Verse
\begin_inset Formula $h=\frac{(T_{a}-(1-h)\cdot(T_{C}+T_{M})}{T_{C}}$
\end_inset


\end_layout

\begin_layout Standard
Beispiel:
\end_layout

\begin_layout Verse
\begin_inset Graphics
	filename images/Hitratio.png
	lyxscale 75
	scale 75

\end_inset


\end_layout

\begin_layout Verse
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Speicher
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prozent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zugriffszeit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 1 Cache
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
95 %
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
200 ps = 
\begin_inset Formula $2\cdot10^{-10}$
\end_inset

s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2 Cache
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
97 %
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
500 ps = 
\begin_inset Formula $5\cdot10^{-10}$
\end_inset

s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main Memory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30 %
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 ns = 
\begin_inset Formula $2\cdot10^{-9}$
\end_inset

s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100 %
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 ms = 
\begin_inset Formula $10^{-3}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Verse
\begin_inset Formula $T_{a}=T_{c1}+(1-h_{c1})\cdot(T_{c2}+(1-h_{c2})\cdot(T_{M}+(1-h_{M})\cdot T_{D}))$
\end_inset


\end_layout

\begin_layout Verse
\begin_inset Formula $T_{a}=2\cdot10^{-10}s+(1-0.95)\cdot(5\cdot10^{-10}s+(1-0.97)\cdot(2\cdot10^{-9}s+(1-0.3)\cdot10^{-3}s))=2\cdot10^{-10}s+0.05\cdot(5\cdot10^{-10}s+0.03\cdot(2\cdot10^{-9}s+0.7\cdot10^{-3}s))=1.05023\cdot10^{-6}s$
\end_inset


\end_layout

\begin_layout Subsubsection*
\begin_inset CommandInset include
LatexCommand input
filename "Stack & Heap/Stack_Heap.lyx"

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "prozesse/prozesse.lyx"

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset include
LatexCommand input
filename "schedulers/schedulers.lyx"

\end_inset


\end_layout

\begin_layout Subsection*
Linux System
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cmd
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
init.d
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
start/stop/reload/restart, autostart
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fstab
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
automated mounting of partitions, ex: /dev/mapper/fedora_zecomputer-home
 /home ext4 defaults 1 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mtab
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wie fstab, einfach nur mit currently mounted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
samba
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
windows support, file/printer sharing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nfs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneller als samba, file sharing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boot
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boot (loads bootloader in flopy, cd, hd etc.
 gives control to boatloader)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mbr (/dev/hda(sda) excecutes grub bootloader), g
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
grub (choose kernel, basic configuration, excecutes kernel and initrd image),
 kernel (mounts root fs)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
init (Looks at the /etc/inittab file to decide the Linux run level.
 replaced by systemd), runlevel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
runlevels
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0-6, /etc/rc*.d directory.
 S12syslog starts before S80sendmail.
 S are used during startup, K during shutdown
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/etc/passwd
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
jorismorger:x:1000:1000:jorismorger:/home/jorismorger:/bin/zsh
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/etc/shadow
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
encrypted passwords
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Deadlocks
\end_layout

\begin_layout Subsection*
Grundsätzliche Probleme
\end_layout

\begin_layout Itemize
Starvation (Verhungern)
\end_layout

\begin_deeper
\begin_layout Itemize
Prozess erhält keinen Zutritt zu Ressource
\end_layout

\begin_layout Itemize
Ursache, z.B.
 unfaire Zuweisungspolicy: FILO (Stack)
\end_layout

\begin_layout Itemize
Abhilfe: nur faire Policies verwenden, z.B.
 FIFO
\end_layout

\end_deeper
\begin_layout Itemize
Deadlock (Verklemmung)
\end_layout

\begin_deeper
\begin_layout Itemize
Prozesse warten gegenseitig auf Freigabe von Ressourcen
\end_layout

\begin_layout Itemize
Die Prozesse und eventuell das gesamte System bleiben hängen
\end_layout

\end_deeper
\begin_layout Standard
t
\end_layout

\begin_layout Subsection*
Voraussetzungen
\end_layout

\begin_layout Itemize
Mutual Exclusion
\end_layout

\begin_deeper
\begin_layout Itemize
mindestens eine Ressource ist exklusiv reserviert
\end_layout

\end_deeper
\begin_layout Itemize
Hold and wait
\end_layout

\begin_deeper
\begin_layout Itemize
mindestens ein Task hat eine Ressource exklusiv reserviert und wartet auf
 weitere Ressourcen
\end_layout

\end_deeper
\begin_layout Itemize
No preemption
\end_layout

\begin_deeper
\begin_layout Itemize
reservierte Ressourcen können dem Task nicht entzogen werden (freiwillige
 Rückgabe nur, wenn Aufgabe gelöst)
\end_layout

\end_deeper
\begin_layout Itemize
Circular wait
\end_layout

\begin_deeper
\begin_layout Itemize
geschlossene 
\begin_inset Quotes eld
\end_inset

Kette
\begin_inset Quotes erd
\end_inset

 von Tasks existiert, in der jeder Prozess mindestens eine Ressource reserviert
 hat, die auch von einem Nachfolger in der Kette benötigt wird
\end_layout

\end_deeper
\begin_layout Standard
1-3 sind Vorbedingungen, mit 4 ist es ein Deadlock.
\end_layout

\begin_layout Standard
die Circular Wait Bedingung kann nicht gelöst werden, wenn Bedingungen 1,
 2 und 3 gegeben sind
\end_layout

\begin_layout Subsection*
Umgang mit Deadlocks
\end_layout

\begin_layout Itemize
Keine Deadlocks zulassen
\end_layout

\begin_deeper
\begin_layout Itemize
verhindern (prevention), dafür sorgen, dass mindestens eine der 4 Bedingungen
 nicht auftritt
\end_layout

\begin_layout Itemize
vermeiden (avoidance), Ressource wird nicht zugesprochen, falls Deadlockgefahr
 besteht
\end_layout

\end_deeper
\begin_layout Itemize
Deadlocks zulassen
\end_layout

\begin_deeper
\begin_layout Itemize
diesen Zustand lösen, wenn er eingetreten ist.
\end_layout

\end_deeper
\begin_layout Itemize
Das Problem ignorieren
\end_layout

\begin_deeper
\begin_layout Itemize
annehmen, dass kein Deadlock auftritt (die meisten Betriebsysteme verwenden
 diese Methode)
\end_layout

\end_deeper
\end_body
\end_document
