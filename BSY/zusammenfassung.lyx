#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Betriebssysteme
\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
Was ist ein Betriebssystem?
\end_layout

\begin_layout Enumerate
Ein Ressourcen Verwalter (CPU -> Reichenleistung, Speicher, I/O Geräte,
 Daten (Sekundärspeicher: Disks, FS, etc))
\end_layout

\begin_layout Enumerate
Eine virtuelle Maschine (Schnittstelle zwischen Anwendersoftware und Hardware,
 abstrahiert von den Details der Hardware)
\end_layout

\begin_layout Enumerate
Anbieter von z.T standartisierten Diensten
\end_layout

\begin_layout Enumerate
Ziel: einfache und effiziente Nutzung von Rechnersystemen
\end_layout

\begin_layout Standard
Batch Systems: nur ein Job aus Batch im Speicher • Jobs werden sequentiell
 abgearbeitet • Monitor zur Steuerung, keine Interaktion mit Anwender 
\end_layout

\begin_layout Standard
Multiprogrammed Batch Systems: mehrere Jobs im Speicher • Scheduler notwendig
 • Interrupt und Speicherverwaltung notwendig 
\end_layout

\begin_layout Standard
Time Sharing Systems: mehrere interaktive Jobs werden "gleichzeitig" abgearbeite
t • Schutz des Filesystems und Arbeitsspeichers notwendig • Mutex (gegenseitiger
 Ausschluss) notwendig - Zugriff auf Drucker, etc.
\end_layout

\begin_layout Subsection
Interrupts
\end_layout

\begin_layout Subsubsection*
Quellen für Interrupts
\end_layout

\begin_layout Itemize
Asynchrone Interrupts: 
\end_layout

\begin_deeper
\begin_layout Itemize
Timer
\end_layout

\begin_layout Itemize
I/O Device
\end_layout

\begin_layout Itemize
Hardwarefehler
\end_layout

\end_deeper
\begin_layout Itemize
synchrone Interrupts:
\end_layout

\begin_deeper
\begin_layout Itemize
Programm, z.B.
 div/0
\end_layout

\begin_layout Itemize
Trap, SWI
\end_layout

\end_deeper
\begin_layout Standard
-> Bessere CPU Nutzung
\end_layout

\begin_layout Standard
Ablauf: • Instruktion zu Ende führen • PC, PSW, Register, etc.
 → speichern (umschalten in System Mode) • Interrupt Vektortabelle → Adresse
 der ISR • ISR Instruktionen ausführen • PC, PSW, Register, etc.
 → wiederherstellen ( umschalten in User Mode) • Instruktionen des Anwenderprogr
amms
\end_layout

\begin_layout Standard
Auslöser Trap: Software, Interrupt: Hardware
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/interrupts.png
	scale 35

\end_inset


\end_layout

\begin_layout Subsubsection*
System Mode - User Mode
\end_layout

\begin_layout Standard
Die meisten Prozessoren arbeiten in zwei Modi (Umschaltung über mode bits):
\end_layout

\begin_layout Itemize
System Mode
\end_layout

\begin_deeper
\begin_layout Itemize
System Mode (Kernel, Supervisor, privilegierter Mode)
\end_layout

\begin_deeper
\begin_layout Itemize
Zurgriff auf kritische Rechner-Ressourcen (Konstrollregister, I/O Instruktionen,
 Speicherverwaltung...)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
User Mode
\end_layout

\begin_deeper
\begin_layout Itemize
Zugriff auf unkritische Rechner-Ressourcen
\end_layout

\begin_deeper
\begin_layout Itemize
kein Zugriff auf Hardware (nur über BS)
\end_layout

\begin_layout Itemize
Instruktionsmenge eingeschränkt
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Speicherhierarchie
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/speicherhierarchie.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
DMA: Direct Memory Access.
 
\end_layout

\begin_layout Subsubsection*
Cache
\end_layout

\begin_layout Itemize
Prozessor liest Wort
\end_layout

\begin_deeper
\begin_layout Itemize
Wort im Cache --> Transfer an CPU
\end_layout

\begin_layout Itemize
Wort nicht im Cache --> Block aus Speicher mit Wort ins Cache transferieren
\end_layout

\begin_layout Itemize
transparent für Benutzer, Zusammenarbeit mit Memory Management Unit
\end_layout

\begin_layout Itemize
\begin_inset Graphics
	filename images/transfer.png
	scale 50

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection*
Lokalitätsprinzip
\end_layout

\begin_layout Standard
Wieso funktioniert Cache?
\end_layout

\begin_layout Itemize
räumliche Lokalität (spacial locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass nächster Speicherzugriff auf "nahe" liegende
 Daten stattfindet
\end_layout

\end_deeper
\begin_layout Itemize
zeitliche Lokalität (temporal locality)
\end_layout

\begin_deeper
\begin_layout Itemize
grosse Wahrscheinlichkeit, dass Speicherzugriff auf gleiches Datum nochmals
 staffindet
\end_layout

\end_deeper
\begin_layout Section
Prozesse
\end_layout

\begin_layout Subsubsection*
Prozessbasierte Betriebsystem
\end_layout

\begin_layout Standard
Gut für Multiprozessorsysteme, grössere Kernel Funktionen sind eigenständige
 Prozesse, BS ist Sammlung von Systemprozessen
\end_layout

\begin_layout Standard

\noun on
Unit of Resource Ownership
\noun default
: eine Einheit, die Ressourcen besitzt, ein virtueller Adressraum, in dem
 das Prozess Image steht, Kontrolle über Ressourcen (Files, I/O Geräte,
 etc.) hat
\end_layout

\begin_layout Standard

\noun on
Unit of Scheduling
\noun default
: Eine Einheit, die schedulierbar ist.
 CPU-Scheduler weist der CPU einen Prozess zu (dispatch).
 zum Prozess gehören der Execution State (PC, SP, Register) und eine Ausführungs
priorität
\end_layout

\begin_layout Subsubsection*
Zustands-Prozessmodell
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/7state.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection*
Prozess und Ressourcenmanangment
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/resourcen.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
Prozess Image besteht aus, ist im virtuellen Speicher (Adresse 0) abgelegt.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Benutzerprogramm (Code), Daten, Stack
\end_layout

\begin_layout Itemize
Kontext, im Prozesskontrollblock (PCB) gespeichert
\end_layout

\begin_deeper
\begin_layout Itemize
PCB, eine Datenstruktur mit Zustandsinformation zum Prozess
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Prozess erzeugung
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/processcreation.png
	scale 50

\end_inset

hak
\end_layout

\begin_layout Paragraph
exec(...)
\end_layout

\begin_layout Standard
überlagert das Programm und den Datenbereich mit neuem Programm und neuem
 Datenbereich, Prozesskontext wird von den Eltern geerbt (kann z.B.
 weiterhin auf geöffnete Files des Elternprozesses zugreifen )
\end_layout

\begin_layout Paragraph*
fork
\end_layout

\begin_layout Standard
COW (Copy on Write, häufig implementiert).
 Kindprozess nicht vollständige Kopie der Eltern, nur wenn Kind schreibt
 werden Datenbereiche erzeugt.
 Alle lesbaren Bereiche können genutzt werden.
 
\end_layout

\begin_layout Subsubsection*
Threads
\end_layout

\begin_layout Standard
Threads sind billig, laufen innerhalb eines Prozesses.
 Kann schnell erzeugt und beendet werden.
 Threadumschaltung ist schnell: nur PC, SP und Register austauschen.
 Brauchen wenig Ressourcen, keinen neuen Adressraum oder Datenbereich oder
 Programmcode.
\end_layout

\begin_layout Subsection*
Linux System
\end_layout

\begin_layout Standard
init.d: start/stop/reload/restart, autostart
\end_layout

\begin_layout Standard
fstab: automated mounting of partitions, ex: /dev/mapper/fedora_zecomputer-home
 /home ext4 defaults 1 2
\end_layout

\begin_layout Standard
mtab: wie fstab, einfach nur mit currently mounted
\end_layout

\begin_layout Standard
samba: windows support, file/printer sharing
\end_layout

\begin_layout Standard
nfs: schneller als samba, file sharing
\end_layout

\begin_layout Standard
boot: boot (loads bootloader in flopy, cd, hd etc.
 gives control to boatloader), mbr (/dev/hda(sda) excecutes grub bootloader),
 grub (choose kernel, basic configuration, excecutes kernel and initrd image),
 kernel (mounts root fs), init (Looks at the /etc/inittab file to decide
 the Linux run level.
 replaced by systemd), runlevel
\end_layout

\begin_layout Standard
runlevels: 0-6, /etc/rc*.d directory.
 S12syslog starts before S80sendmail.
 S are used during startup, K are used during shutdown
\end_layout

\begin_layout Standard
/etc/passwd: jorismorger:x:1000:1000:jorismorger:/home/jorismorger:/bin/zsh
\end_layout

\begin_layout Standard
/etc/shadow: encrypted passwords
\end_layout

\end_body
\end_document
