#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/semaphore.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/spinlock.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/TAS.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Ressourcen-Klassen
\end_layout

\begin_layout Itemize
Preemtable (ohne Nebenwirkungen entziehbar) -> CPU, Hauptspeicher
\end_layout

\begin_layout Itemize
Nonpreemptable (Nebenwirkungen) -> Drucker, CD-Brenner
\end_layout

\begin_layout Subsubsection*
Umgang mit Deadloks
\end_layout

\begin_layout Itemize
Prevention: eines dieser verhindern: Mut.
 excl., hold & wait, no preemption, circular wait
\end_layout

\begin_deeper
\begin_layout Itemize
ineffiziente 
\begin_inset Quotes eld
\end_inset

Serialisierung
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Avoidance: neuer Zustand sicher
\end_layout

\begin_layout Itemize
Detection: zulassen, beim Auftreten Massnahmen treffen
\end_layout

\begin_deeper
\begin_layout Itemize
OS muss Auftreten bemerken
\end_layout

\begin_layout Itemize
DL auflösen und lauffähigen Zustand widerherstellen
\end_layout

\begin_layout Itemize
alle 40min oder bei tiefer CPU Auslastung überprüfen
\end_layout

\end_deeper
\begin_layout Subsubsection*
Deadlock lösen
\end_layout

\begin_layout Itemize
alle beteligten Prozesse stoppen
\end_layout

\begin_layout Itemize
checkpoint restore
\end_layout

\begin_layout Itemize
der reihe nach stoppen (bis gelöst)¹
\end_layout

\begin_layout Itemize
Ressourcen entziehen (bis gelöst)¹
\end_layout

\begin_layout Standard
¹Strategie: wenigsten CPU / wenigsten Output / wenigsten Ressourcen / kleinste
 Prio / längste gesch.
 Rechenzeit
\end_layout

\begin_layout Standard
=> Am besten werden die Ressourcen in Klassen eingetelit und je nach Klasse
 eine Strategie festgelegt.
\end_layout

\begin_layout Subsubsection*
Race Condition
\end_layout

\begin_layout Standard
Def: Gemeinsame Daten lesen und schreiben -> das Resultat hängt von der
 Ausführungsreihenfolge ab.
\end_layout

\begin_layout Standard
Forderungen:
\end_layout

\begin_layout Itemize
only one in the critical section
\end_layout

\begin_layout Itemize
for a finite time only
\end_layout

\begin_layout Itemize
makes no assumptions on speed/cores
\end_layout

\begin_layout Itemize
not be delayed infinitly
\end_layout

\begin_layout Itemize
requests entry and granted without delay
\end_layout

\begin_layout Itemize
halt in non critical section doesnt interfere with other processes
\end_layout

\begin_layout Standard
Software: Algorithmen: busy-wait / spinlock
\end_layout

\begin_layout Standard
Hardware: Maschineninstruktionen: atom.
 Inst: TestAndSet, CompareAndSwap, (Intterups off)
\end_layout

\begin_layout Standard
OS: Mutex, Semaphore
\end_layout

\begin_layout Standard
Kombiniert mit Programmiersprache: Monitore (Java)
\end_layout

\begin_layout Verse
Problem: Priority Inversion -> Solution: Priority Inheritance
\end_layout

\begin_layout Verse
-> high prio tast wants lock on resource already locked by lower prio task
\end_layout

\begin_layout Verse
-> low prio task inherits highter prio so he can finish
\end_layout

\begin_layout Standard
Monitor: Klasse mit synchronized Methoden
\end_layout

\begin_layout Standard
Mutex: Zugriff auf kritische Ressource
\end_layout

\begin_layout Standard
Synchronisation: Reihenfolge der Verarbeitung (Barriere)
\end_layout

\begin_layout Subsubsection*
Buddy-Algo
\end_layout

\begin_layout Standard
solange Blockgrösse halbieren bis Block minimaler Grösse zur verfügung steht
\end_layout

\begin_layout Subsubsection*
Paging
\end_layout

\begin_layout Itemize
logische Adressen -> Pages
\end_layout

\begin_layout Itemize
physikalische Adressen -> Frames
\end_layout

\begin_layout Itemize
pro Prozess eine Pagetable (lookup)
\end_layout

\begin_layout Standard
Pagesize = Framesize (1, 4, 8 KB)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/paging.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/paging-exampl.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Segmente
\end_layout

\begin_layout Itemize
Program, Data, Stack
\end_layout

\begin_layout Itemize
keine interne Fragmentierung, dafür externe
\end_layout

\begin_layout Itemize
pro Prozess eine Segment-Tabelle (OS) (lookup + Add)
\end_layout

\begin_deeper
\begin_layout Itemize
+ Speicherschutz +Programme unabh.
 verändern
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/segmentation.png
	width 5cm

\end_inset


\end_layout

\end_body
\end_document
