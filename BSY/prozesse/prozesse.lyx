#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection*
Prozesse
\end_layout

\begin_layout Subsubsection*
Prozessbasierte Betriebsystem
\end_layout

\begin_layout Standard
Gut für Multiprozessorsysteme, grössere Kernel Funktionen sind eigenständige
 Prozesse, BS ist Sammlung von Systemprozessen
\end_layout

\begin_layout Description

\noun on
Unit-of-Resource-Ownership
\noun default
: eine Einheit, die Ressourcen besitzt, ein virtueller Adressraum, in dem
 das Prozess Image steht, Kontrolle über Ressourcen (Files, I/O Geräte,
 etc.) hat
\end_layout

\begin_layout Description

\noun on
Unit-of-Scheduling
\noun default
: Eine Einheit, die schedulierbar ist.
 CPU-Scheduler weist der CPU einen Prozess zu (dispatch).
 zum Prozess gehören der Execution State (PC, SP, Register) und eine Ausführungs
priorität
\end_layout

\begin_layout Subsubsection*
Zustands-Prozessmodell
\end_layout

\begin_layout Standard
Modellierung Prozessverhalten/7-Zustands-Modell
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/prozessverhalten.png
	scale 50

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/7state.png
	scale 50

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Prozess und Ressourcenmanangment
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/resourcen.png
	scale 50

\end_inset


\end_layout

\begin_layout Itemize
Prozess Image besteht aus, ist im virtuellen Speicher (Adresse 0) abgelegt.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Benutzerprogramm (Code), Daten, Stack
\end_layout

\begin_layout Itemize
Kontext, im Prozesskontrollblock (PCB) gespeichert
\end_layout

\begin_deeper
\begin_layout Itemize
PCB, eine Datenstruktur mit Zustandsinformation zum Prozess
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
PCB Process Identification (PID, Parentproess, Benutzer), Process State
 Information (Inhalt der Register, Flags, SP), Process Control Information
 (Queues, Processprivileges,Memory Mgmt).
 
\end_layout

\begin_layout Subsubsection*
Prozess erzeugung
\end_layout

\begin_layout Standard
PID erzeugen -> Speicher für Prozess Image allozieren -> PCB initialisieren
 -> Verkettung für Queues aufsetzen -> Weitere Datenstrukturen init
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/processcreation.png
	scale 50

\end_inset


\end_layout

\begin_layout Paragraph
exec(...)
\end_layout

\begin_layout Standard
überlagert das Programm und den Datenbereich mit neuem Programm und neuem
 Datenbereich, Prozesskontext wird von den Eltern geerbt (kann z.B.
 weiterhin auf geöffnete Files des Elternprozesses zugreifen )
\end_layout

\begin_layout Paragraph*
COW
\end_layout

\begin_layout Standard
fork: (Copy on Write, häufig implementiert).
 Kindprozess nicht vollständige Kopie der Eltern, nur wenn Kind schreibt
 werden Datenbereiche erzeugt.
 Alle lesbaren Bereiche können genutzt werden.
 
\end_layout

\begin_layout Subsubsection*
Threads
\end_layout

\begin_layout Standard
Threads sind billig, laufen innerhalb eines Prozesses.
 Kann schnell erzeugt und beendet werden.
 Threadumschaltung ist schnell: nur PC, SP und Register austauschen.
 Brauchen wenig Ressourcen, keinen neuen Adressraum oder Datenbereich oder
 Programmcode.
 Thread blockiert: User level -> ganzer Prozess blockiert.
 Kernel level -> nur Thread blockiert
\end_layout

\begin_layout Subsubsection*
Zombie, Orphan, Daemon
\end_layout

\begin_layout Standard
Zombie
\end_layout

\begin_layout Itemize
Terminiert ein Prozess, so ist dies ein Zombie, bis der Parent Prozess den
 Status des Prozesses abfragt.
\end_layout

\begin_layout Standard
Orphan (Waise)
\end_layout

\begin_layout Itemize
Terminiert der Parent Prozess vor dem Child Prozess, so wird der Child Prozess
 zum Waisen.
\begin_inset Newline newline
\end_inset

Diesem wird der Prozess mit der PID 1 als Parent zugeordnet
\end_layout

\begin_layout Standard
Daemon
\end_layout

\begin_layout Itemize
Ein Daemon ordnet sich bewusst den Prozess mit PID 1 als Parent zu.
\begin_inset Newline newline
\end_inset

Somit ist er für den Benutzer nicht mehr sichtbar und agiert als Systemprozess
 im Hintergrund.
\end_layout

\end_body
\end_document
