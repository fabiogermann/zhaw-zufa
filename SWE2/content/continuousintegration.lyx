#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Continuous Integration
\end_layout

\begin_layout Itemize
You know what continuous integration CI is.
\end_layout

\begin_deeper
\begin_layout Itemize
A fully automated and reproductible build, incuding testing, that runs many
 times a day.
\end_layout

\end_deeper
\begin_layout Itemize
You understand the importance of CI.
\end_layout

\begin_layout Itemize
You can explain the benefits of CI.
\end_layout

\begin_deeper
\begin_layout Itemize
when a faliure occurs, a potential problem has been detected early!
\end_layout

\begin_layout Itemize
always aware of the current state of the project
\end_layout

\begin_layout Itemize
less time spent on integration bugs
\end_layout

\begin_layout Itemize
less time wasted because of broken code in VCS
\end_layout

\begin_layout Itemize
prove your system can build
\end_layout

\begin_layout Itemize
discover potential deployment issues
\end_layout

\end_deeper
\begin_layout Itemize
You can describe a typical CI environement.
\end_layout

\begin_deeper
\begin_layout Itemize
VCS server
\end_layout

\begin_layout Itemize
build server
\end_layout

\begin_layout Itemize
deployment server
\end_layout

\begin_layout Itemize
automation tools
\end_layout

\begin_layout Itemize
ci tools
\end_layout

\end_deeper
\begin_layout Itemize
You can work efficiently in a CI environment.
\end_layout

\begin_deeper
\begin_layout Itemize
commit/update often
\end_layout

\begin_layout Itemize
run often
\end_layout

\begin_layout Itemize
write tests
\end_layout

\begin_layout Itemize
run tests
\end_layout

\begin_layout Itemize
common code ownerhsip
\end_layout

\end_deeper
\begin_layout Subsection*
Integration
\end_layout

\begin_layout Standard
Modularization: team developemtn, complex systems manageable
\end_layout

\begin_layout Standard
a model must: compile, run, pass tests, deploy
\end_layout

\end_body
\end_document
