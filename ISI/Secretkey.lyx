#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Secret Key (oder Symmetic) Cryptosystem
\end_layout

\begin_layout Standard
Der gleiche Schlüssel wird für die Ver- bzw.
 Entschlüsselung verwendet, wobei der Schüssel über einen sicheren Kanal
 ausgetauscht werden muss, und unbedingt gehein gehalten werden muss.
 Der Schüssel sollte von Zeit zu Zeit gewechselt werden.
\end_layout

\begin_layout Standard
Schwäche: Problem bei der sicheren Key Verteilung
\end_layout

\begin_layout Subsection*
Block Ciphers
\end_layout

\begin_layout Standard
Der Plaintext wird in Blöcke von n Bits aufgeteilt (64,128,256) und dann
 mit einem Schlüssel vom m Bits (unsicher: 40,56,64,80 sicher: 128,168,192,256).
 Das Mapping des Plaintexts soll einen möglichst zufällig aussehenden Ciphertext
 erzeugen.
 Ca 50% aller Bits sollen verschieden sein.
\end_layout

\begin_layout Standard
Beispiele: DES, 3DES (enc-dec-enc), IDEA, CAST, Blowfish, RC2, RC5, AES
\end_layout

\begin_layout Subsubsection*
BC Mode - Electronic Code Book ECB
\end_layout

\begin_layout Standard
Jeder Plaintext Block wird auf einen Ciphtertext Block gemapp.
 Enc/Dec wird über einen Block nach dem anderen.
 
\end_layout

\begin_layout Standard
Schwäche: Jeder Plaintext-Block mappt immer auf den gleichen Ciphertext-Block.
\end_layout

\begin_layout Subsubsection*
BC Mode - Cipher Block Chaining CBC
\end_layout

\begin_layout Standard
Jeder Plaintext-Block wird mit dem vorhergehenden Ciphertextblock XOR verknüpft
 und erst dann verschlüsselt.
 Der InitialisierungsVektor soll jedoch nur einmal Verwendet werden.
\end_layout

\begin_layout Standard
Schwäche: Dummheit des Menschen bei der Interpretation.
 (Modifizieren eines gesendeten Blockes.
 (Erwünschte änderung plus nebenwirkung)
\end_layout

\begin_layout Subsection*
Stream VS Block Ciphers
\end_layout

\begin_layout Itemize
SC: Bit-Level, mehrheitlich HW implementiert, hoher Datendurchsatz, Bit-Fehler
 propagieren nicht
\end_layout

\begin_layout Itemize
BC: Word-Level, als Softwarefunktionen implementiert, Bit-Fehler propagiert
 (vgl CBC)
\end_layout

\begin_layout Itemize
Heute: Mehrheitlich eine Vermischung in beiden fällen, bessere Performance.
\end_layout

\begin_layout Subsection*
Stream Ciphers
\end_layout

\begin_layout Standard
Mit dem Schlüssel und einem Initialisierungsvektor wird ein Pseudo-Random-Sequen
ce-Generator initialisiert, welcher den Keystream liefert.
 Keystream XOR Plaintextstream = Ciphertextstream.
\end_layout

\begin_layout Subsubsection*
LFSR
\end_layout

\begin_layout Standard
Maximale Sequenzlänge 
\begin_inset Formula $2^{n}-1$
\end_inset

 da der all0 Status immer wieder den all0 Status produziert, kann dieser
 nicht toleriert werden.
 Durch die endliche Anzahl zustände, müssen verschiedenlange LFSR kombiniert
 werden (sicher genung gegen Crypt.Analyse).
\end_layout

\begin_layout Subsubsection*
RC4
\end_layout

\begin_layout Standard
Byte orientiert, simple Struktur und damit sehr einfache Softwareimplementation.
 Gute randomness Eigenschaften.
 Sicher mit 128bit (mit 40bit unsicher, recent change).
\end_layout

\begin_layout Subsection*
SC mit BC
\end_layout

\begin_layout Subsubsection*
Output Feedback Mode
\end_layout

\begin_layout Standard
Der generierte Keystream (hier in Block) wird wieder als Input für die nächste
 Generation verwendet (als neuer IV).
 Der Key wird jeder BlockCipherBox zugeführt.
\end_layout

\begin_layout Standard
Vorteil: Man kann gut etablierte BC verwenden um Keystreams zu produzieren.
\end_layout

\begin_layout Subsubsection*
Counter Mode
\end_layout

\begin_layout Standard
An Stelle des vorhergegenden Keystream-Blocks wird der inkrementierte IV
 als IV benutzt.
\end_layout

\begin_layout Standard
Vorteil: Die Decodierung kann zu jedem Zeitpunk gestartet werden, ohne den
 gesammten Keystream vorzurechnen.
 (WLAN,GSM,UDP-RTP unreliable Channels)
\end_layout

\end_body
\end_document
