#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.5cm
\topmargin 0.5cm
\rightmargin 0.5cm
\bottommargin 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Enterprise Java Bean
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="6cm">
<column alignment="left" valignment="top" width="6cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Session Bean <Bank Service>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Entity Bean <konto, Vertrag>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message Driven B.
 < Bank <-> Bank>
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Businesslogic
\end_layout

\begin_layout Itemize
stateless: speichert keine Informationen zw.
 Aufrufen (+speed)
\end_layout

\begin_layout Itemize
stateful: Instanz über mehrere Calls hinweg einem Client zugewiesen (mit
 release() freig.
 oder timeout, con.
 cut)
\end_layout

\begin_layout Itemize
operiert auf Daten
\end_layout

\begin_layout Itemize
greift auf andere Beans zu
\end_layout

\begin_layout Itemize
leerer Konstruktor vorhanden
\end_layout

\begin_layout Itemize
wird oft lokal erstellt/gelöscht
\end_layout

\begin_layout Itemize
kann Teil von Transaktion sein
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Zustand des Business Object
\end_layout

\begin_layout Itemize
ist persistent
\end_layout

\begin_layout Itemize
bildet Datenquelle auf Klasse ab
\end_layout

\begin_layout Itemize
MUSS: Datensatz repräsentieren
\end_layout

\begin_layout Itemize
MUSS: eind.
 Schlüssel haben
\end_layout

\begin_layout Itemize
kann nicht von Client angesprochen werden -> ausschliesslich über lokale
 SB
\end_layout

\begin_layout Plain Layout
(EJB3 EB = JPA Managed Object)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Dienst für Zugriff auf async.
 Schnittstelle (JMS)
\end_layout

\begin_layout Itemize
asynchroner Prozess
\end_layout

\begin_layout Itemize
MDB als Listener von Meldungs Brokern (JMS)
\end_layout

\begin_layout Itemize
keine persistenten Daten
\end_layout

\begin_layout Itemize
kann Teil einer Transaktion sein
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-08_16-33-25.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-08_16-38-25.png
	width 4cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-08_16-50-39.png
	width 5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Stateless Session Bean
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_12-49-29.png
	width 10cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_12-49-45.png
	width 10cm

\end_inset


\end_layout

\begin_layout Subsubsection*
Threading
\end_layout

\begin_layout Itemize
Das SLSB selber ist single-threaded, d.h.
 es befindet sich jeweils nur ein Thread in Bearbeitung innerhalb eines
 Beans: Container weist einem neuen Aufrufer jeweils ein eigenes SLSB und
 Thread zu
\end_layout

\begin_layout Itemize
EJBs sollen selber keine Threads starten, sondern das dem EJB Container
 überlassen.
\end_layout

\begin_deeper
\begin_layout Itemize
Ist eine nicht immer leicht einzuhaltende Einschränkung (z.B.
 bei Verwendung von Log4J)
\end_layout

\end_deeper
\begin_layout Subsubsection*
Lebenszyklus
\end_layout

\begin_layout Itemize
Das Bean kann sich über Zustandsänderungen via Callback informieren lassen
 falls irgendwelche Initialisierungs-/Aufräumarbeiten (MethodenAnnotation)
 (ala: @PostConstruct <br> public void initializs()...)
\end_layout

\begin_deeper
\begin_layout Itemize
@PostConstruct: The annotated method is called by the container immediately
 after a bean instance is instantiated.
\end_layout

\begin_layout Itemize
@PreDestroy: The annotated method is called before the container destroys
 an unused or expired bean instance from its object pool.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="9cm">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stateless SLSB (taxi bsp)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stateful SFSB (taxi bsp)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
+ Taxi wird optimal ausgenutzt; Voraussetzung: gute Balance zwischen Anzahl
 Kunden und Taxis
\end_layout

\begin_layout Itemize
- alles was ich benötige muss ich mitnehmen & darf nichts liegen lassen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
+ kann etwas dort deponieren
\end_layout

\begin_layout Itemize
+ mein Auto ist sicher verfügbar
\end_layout

\begin_layout Itemize
- Wagen wird schlecht ausgenutzt (steht herum)
\end_layout

\begin_layout Itemize
- Parkplatz kann voll sein
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Stateful Session Bean
\end_layout

\begin_layout Itemize
Stateful: Zustand wird zwischen Client-Aufrufen gehalten; eine Instanz ist
 über mehrere Methodenaufrufe explizit einem Client zugeordnet
\end_layout

\begin_layout Itemize
Bleiben dem Klienten zugeordnet bis sie
\end_layout

\begin_deeper
\begin_layout Itemize
mittels remove() vom Klienten wieder freigegeben werden
\end_layout

\begin_layout Itemize
nach einem bestimmten Timeout, vom Server selbständig freigegeben werden
 (Annahme: Klient hat Verbindung verloren oder ist abgestürzt)
\end_layout

\end_deeper
\begin_layout Itemize
Stateful Session Beans sind
\end_layout

\begin_deeper
\begin_layout Itemize
weniger Effizient, da Instanzen aufbewahrt und wieder zugeordnet werden
 müssen
\end_layout

\begin_layout Itemize
nicht „location transparent“ (Ortsunabhängig) weil der Zustand typischerweise
 im Hauptspeicher oder Dateisystem des Servers gespeichert wird
\end_layout

\begin_layout Itemize
Herstellerabhängige Lösungen für Server-Cluster
\end_layout

\end_deeper
\begin_layout Itemize
Stateful Session Beans werden mit @stateful gekennzeichnet
\end_layout

\begin_layout Itemize
Stateful SB muss Serializable implementieren
\end_layout

\begin_layout Itemize
Bean dem Klient zugeordnet: Typische Anwendung ShoppingCart
\end_layout

\begin_layout Itemize
Definition der Interfaces gleich wie bei stateless SB
\end_layout

\begin_layout Itemize
Zusätzlicher Zustand: "Passive": länger nicht mehr gebrauchte Objekte werden
 aus dem Hauptspeicher entfernt
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-05-30.png
	width 8cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-05-53.png
	width 8cm

\end_inset


\end_layout

\begin_layout Subsubsection*
Callbacks
\end_layout

\begin_layout Itemize
@PostConstruct: see stateless session bean
\end_layout

\begin_layout Itemize
@PreDestroy: see stateless session bean
\end_layout

\begin_layout Itemize
@PrePassivate: If a stateful session bean instance is idle for too long,
 the container may passivate it and store its state to a cache.
 The method tagged by this annotation is called before the container passivates
 the bean instance.
 This annotation is applicable only to stateful session beans.
\end_layout

\begin_layout Itemize
@PostActivate: When the client uses the passivated stateful session bean
 again, a new instance is created and the bean state is restored.
 The method that tagged this annotation is called when the activated bean
 instance is ready.
 This annotation is only applicable to stateful session beans.
\end_layout

\begin_layout Itemize
@Remove tag.
 It is not a callback method since the application, not the container, calls
 the @Remove method on the bean stub to remove the bean instance in the
 container object pool.
\end_layout

\begin_layout Itemize
@Init: This annotation designates initialization methods for a stateful
 session bean.
 It is different from the @PostConstruct annotation in that multiple methods
 can be tagged with @Init in a stateful session bean.
 However, each bean instance can have only one @Init method invoked.
 The EJB 3.0 container determines which @Init method to invoke depending
 on how the bean is created (see the EJB 3.0 specification for details).
 The @PostConstruct method is called after the @Init method.
\end_layout

\begin_layout Subsection*
Message Driven Bea MDB
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Itemize
Zur zeitliche Entkopplung von Sender und Empfänger aber keine inhaltliche
 Entkopplung: Sender und Empfänger müssen beide das Meldungsformat verstehen
\end_layout

\begin_layout Itemize
Reliable Messaging: Sicherstellen, dass Meldung auch abgeliefert wird, heisst
 aber nicht, dass sie erfolgreich verarbeitet wurde
\end_layout

\begin_layout Itemize
Asynchrones Messaging ist wesentlich komplexer in der Handhabung als einfaches
 RPC Modell, insbesondere im Fehlerfall.
\end_layout

\begin_layout Plain Layout
Einsatz:
\end_layout

\begin_layout Itemize
Um Spitzen beim Anfallen von Meldungen kontinuierlich zu verarbeiten ->
 Meldungssystem als Puffer verwendet
\end_layout

\begin_layout Itemize
Wenn Empfänger der Nachricht nicht dauern on-line ist
\end_layout

\begin_layout Itemize
Um bei lange andauernden Berechnungen den Klienten nicht zu blockieren
\end_layout

\begin_layout Itemize
Um Daten zwischen 2 Systemen im Hintergrund abzugleichen (wenn keine andere
 Lösung möglich)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Publish-and-Subscribe
\end_layout

\begin_layout Itemize
Ein Klient senden (publizieren) Meldung an einen Topic-Kanal
\end_layout

\begin_layout Itemize
Alle Empfänger die sich bei diesem Topic-Kanal angemeldet haben (subscribe)
 bekommen die Meldung zugeschickt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Queue (Point-to-Point)
\end_layout

\begin_layout Itemize
Ein Klient sendet eine Meldung an eine Queue
\end_layout

\begin_layout Itemize
Auf der Empfängerseite kann mittels polling oder call-back der Empfänger
 die Meldung empfangen
\end_layout

\begin_layout Itemize
Empfänger können die Meldungen nach gewissen Kriterien filtern
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="6cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection Factories
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ist ein Objekt um Connecions zu erzeugen.
 Es kapselt die entsprechenden Verbindungsparameter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@Resource(mappedName="jms/HelloFactory") 
\end_layout

\begin_layout Plain Layout
private static QueueConnectionFactory connectionFactory;
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Queue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ist der Kanal über den die Meldungen versendet werden
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@Resource(mappedName="jms/Hello") 
\end_layout

\begin_layout Plain Layout
private Queue queue;
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kapselt eine Verbindung z.B.
 als TCP/IP Socket.
 Sessions werden darüber erstellt - durch Schliessen der Verbindung werden
 auch alle Sessions geschlossen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection connection = connectionFactory.createConnection();
\end_layout

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
connection.close();
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Session
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eine Session wird für die Erstellung und das Konsumieren von Meldungen verwendet.
 Eine Session selber wird via die Connection erstellt - Schliessen der Session
 blockiert bis alle Meldungen abgeschickt sind
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Session session = connection.CreateSession(false, Session.AUTO_ACKNOWLEDGE);
\end_layout

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
session.close();
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message Producers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ist ein Objekt, das für das Versenden von Meldungen verwendet wird
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MessageProducer producer = session.createProducer(queue);
\end_layout

\begin_layout Plain Layout
producer.send(message);
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message Consumers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ist ein Objekt, das für das Empfangen von Meldungen verwendet wird.
 Es implementiert das MessageConsumer Interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MessageConsumer consumer = session.createConsumer(queue);
\end_layout

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
Message m = consumer.recieve(); (polling)
\end_layout

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
Listener mylist = new Listener(); (callback)
\end_layout

\begin_layout Plain Layout
consumer.setMessageListener(mylist);
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\qquad$
\end_inset


\end_layout

\begin_layout Subsubsection*
Typen von Meldungen
\end_layout

\begin_layout Itemize
TextMessage: Übermittelt einzelnen Text-String.
\end_layout

\begin_layout Itemize
MapMessage: Übermittelt (mehrere) Attribute als Key/Value-Paare.
 Dabei können die Values nicht nur Strings sein, sondern auch viele andere
 Java-Typen.
\end_layout

\begin_layout Itemize
ObjectMessage: Übermittelt ein Java-Object (welches 'Serializable' implementiere
n muss).
\end_layout

\begin_layout Itemize
StreamMessage: Übermittelt Streams ähnlich wie 'DataOutputStream'.
 Anders als 'BytesMessage' übergibt 'StreamMessage' auch Datentypen.
\end_layout

\begin_layout Itemize
BytesMessage: Übermittelt Streams ähnlich wie 'DataOutputStream'.
 Anders als 'StreamMessage' übergibt 'BytesMessage' nicht interpretierte
 Rohdaten.
\end_layout

\begin_layout Subsubsection*
MDBs
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Implementiert das javax.jms.MessageListener Interface
\end_layout

\begin_layout Itemize
Die Klasse muss mit @MessageDriven Annotation versehen sein
\end_layout

\begin_layout Itemize
Mit mappedName wird der JNDI Eintrag bestimmt unter der das MDB Meldungen
 konsumiert
\end_layout

\begin_layout Itemize
Wenn eine neue Nachricht ankommt, wird die onMessage Methode aufgerufen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
import javax.ejb.*; 
\end_layout

\begin_layout Plain Layout
import javax.jms.*; 
\end_layout

\begin_layout Plain Layout
@MessageDriven(mappedName = "jms/Hello", activationConfig = { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue
 = "Auto-acknowledge"),
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@ActivationConfigProperty(propertyName = "destinationType", propertyValue
 = "javax.jms.Queue") 
\end_layout

\begin_layout Plain Layout
}) 
\end_layout

\begin_layout Plain Layout
public class HelloMessageBean implements MessageListener {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@Resource 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

private MessageDrivenContext mdc; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public void onMessage(Message inMessage) {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

if (inMessage instanceof TextMessage) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

TextMessage msg = (TextMessage)inMessage; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

logger.info("Hallo "+ msg.getText()); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
EJB Komponente Aufbau
\end_layout

\begin_layout Itemize
Enterprise Bean Klasse (Implementation der Funk.)(entw.
 SB oder MDB)
\end_layout

\begin_layout Itemize
Remote und Local Interfaces
\end_layout

\begin_deeper
\begin_layout Itemize
Schnittstelle für die eigentliche Logik
\end_layout

\begin_layout Itemize
benötigt um Hilfsklassen für Remote zu generieren
\end_layout

\begin_layout Itemize
remote, local oder beide können erweitert werden
\end_layout

\begin_layout Itemize
REMOTE:
\end_layout

\begin_deeper
\begin_layout Itemize
BeanNameRemote.java/class (oder nur BeanName.java/class)
\end_layout

\begin_layout Itemize
selbe Methoden wie EJB Klasse
\end_layout

\begin_layout Itemize
stub+impl werden daraus generiert
\end_layout

\begin_layout Itemize
impl delegiert ant Container
\end_layout

\end_deeper
\begin_layout Itemize
LOCAL:
\end_layout

\begin_deeper
\begin_layout Itemize
BeanNameLocal.java/class
\end_layout

\begin_layout Itemize
zur Optimierung für Zugriff in der selben VM
\end_layout

\begin_layout Itemize
Unterschiede: byRef/byVal/Excep.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
EJB3 ist gegenüber EJB2.1 eine Vereinfachung
\end_layout

\begin_layout Subsection*
EJB Implementation
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="5cm">
<column alignment="left" valignment="top" width="5cm">
<column alignment="left" valignment="top" width="11cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
BeanNameBean.java/class
\end_layout

\begin_layout Itemize
eigentliche Implementation der Funk.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
myEJB.ear
\end_layout

\begin_layout Plain Layout
| - META-INF
\end_layout

\begin_layout Plain Layout
| .
 | - application.xml
\end_layout

\begin_layout Plain Layout
| - beans.jar
\end_layout

\begin_layout Plain Layout
| .
 | - META-INF
\end_layout

\begin_layout Plain Layout
| .
 | .
 | - ejb-jar.xml
\end_layout

\begin_layout Plain Layout
| .
 | - MyBean.class
\end_layout

\begin_layout Plain Layout
| - web.war
\end_layout

\begin_layout Plain Layout
| .
 | - hello.jsp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<ear destfile="${build.dir}/myapp.ear" 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

appxml="${src.dir}/metadata/application.xml">
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<fileset dir="${build.dir}" includes="*.jar,*.war"/> 
\end_layout

\begin_layout Plain Layout
</ear>
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-08_17-24-32.png
	width 9cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-08_17-25-12.png
	width 9cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ejb-jar.xml
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
application.xml (beschreibt struktur der EAR datei)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<ejb-jar>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<description>jBoss test application </description>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<display-name>Test</display-name>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<enterprise-beans>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<session>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<ejb-name>Teller</ejb-name>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<remote>org.jboss.ejb3.test.bank.Teller</remote>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<ejb-class>org.jboss.ejb3.test.bank.TellerBean</ejb-class>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<session-type>Stateless</session-type>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<transaction-type>Container</transaction-type>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

</session>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<enterprise-beans>
\end_layout

\begin_layout Plain Layout
<ejb-jar>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<?xml version="1.0" encoding="UTF-8"?> 
\end_layout

\begin_layout Plain Layout
<application xmlns="..." version="1.4" xmlns:xsi="..." xsi:schemaLocation="...">
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<display-name>trail</display-name>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<description>Einfaches Beispiel</description>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<module>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<ejb>beans.jar</ejb>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

</module>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

<module>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<web>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<web-uri>web.war</web-uri>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

<context-root>trail</context-root>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

</web>
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

</module>
\end_layout

\begin_layout Plain Layout
</application>
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Local/Remote Client von Session Bean
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Lookup mittels JNDI (Local und Remote Stubs haben unterschiedliche JNDI
 Einträge)
\end_layout

\begin_layout Enumerate
Aufrufen
\end_layout

\begin_layout Enumerate
Bei stateful SB am Schluss (wenn nicht mehr gebraucht): remove()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clientside
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
InitialContext ctx = new InitialContext(); 
\end_layout

\begin_layout Plain Layout
helloBean = (HelloSession) ctx.lookup("java:global/trail.HelloSession"); 
\end_layout

\begin_layout Plain Layout
helloBean.hello()
\end_layout

\begin_layout Plain Layout
// stateful only helloBean.remove()
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Plain Layout
// jdni.properties (wenn nicht "localhost" Property anpassen )
\end_layout

\begin_layout Plain Layout
java.naming.provider.url=rmi://localhost:1099
\end_layout

\begin_layout Plain Layout
java.naming.factory.initial=com.sun.jndi.rmi.registry.RegistryContextFactory
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Serverside
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@EJB (mappedName="java:global/trail.HelloSession")
\end_layout

\begin_layout Plain Layout
HelloSession helloBean;
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Datenbank Zugriff
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EJB Variante
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-27-41.png
	width 9cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-28-03.png
	width 9cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
Datenbank-Treiber Typ ist hart kodiert: Unterhaltssproblem
\end_layout

\begin_layout Itemize
Die Initialisierungsstring der Datenbank ist im Programm hart kodiert: dito
\end_layout

\begin_layout Itemize
ebenso Benutzername und Passwort: Sicherheitsproblem
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
Datenbank-Parameter werden ausserhalb Anwendung (im Container) definiert
\end_layout

\begin_layout Itemize
Diesen Parametern wird ein symbolischer Namen zugewiesen: z.B.
 Dozenten und unter diesem ins JNDI Verzeichnis als DataSource eingetragen
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="8cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-31-50.png
	width 8cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection con = DozentenDS.getConnection();
\end_layout

\begin_layout Plain Layout
con.setAutoCommit(false); 
\end_layout

\begin_layout Plain Layout
logger.info("got connection"); 
\end_layout

\begin_layout Plain Layout
PreparedStatement statement = 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

con.prepareStatement("SELECT * FROM Dozenten WHERE name LIKE ?"); 
\end_layout

\begin_layout Plain Layout
statement.setString(1, name + "%"); 
\end_layout

\begin_layout Plain Layout
ResultSet rs = statement.executeQuery(); 
\end_layout

\begin_layout Plain Layout
LinkedList list = new LinkedList(); 
\end_layout

\begin_layout Plain Layout
while (rs.next()) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset

Professor st = new Professor(rs.getLong("SCHLUESSEL"), 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

rs .getString("NAME"), 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

rs.getString("FIRSTNAME")); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset

list.add(st); 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zusätzlich mit Connection Pooling! (DB preis pro Verbindung!)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Monitoring & Management
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Monitoring Aspekte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anforderungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_10-09-49.png
	width 8cm

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
platform unabhängig
\end_layout

\begin_layout Itemize
protokoll unabhängig
\end_layout

\begin_layout Itemize
informations modell unabhängig
\end_layout

\begin_layout Itemize
mgmt Anwendung unabhängig
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\vphantom{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="3cm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Performance Daten/Statistiken
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transaktionen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection Pools
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überwachung der App.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zustellung von Nachrichten
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Ermitteln der Aufrufe für Serverlets JSP
\end_layout

\begin_layout Itemize
Performance Resourcenben., Antwortzeiten
\end_layout

\begin_layout Itemize
Logs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Anzahl Commits, Rollbacks pro EJB
\end_layout

\begin_layout Itemize
avg # locked Beans
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Anzahl von Connections im Pool
\end_layout

\begin_layout Itemize
avg Wartezeiten auf Pool-Connect.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Auslesen/Ändern von Appl.
 Param.
 zur Laufzeit
\end_layout

\begin_layout Itemize
Backend Ressourc.
\end_layout

\begin_layout Itemize
Fachliche Prop.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Fehler
\end_layout

\begin_layout Itemize
Zustandsänderungen
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Java Management Extention JMX
\end_layout

\begin_layout Itemize
besteht aus einer API und Services für das Management (eine Architektur)
\end_layout

\begin_layout Itemize
ermöglicht Überwachen von Java Appl.
 mit std.
 Management Konsolen
\end_layout

\begin_layout Itemize
unabhängig von Java EE entstanden
\end_layout

\begin_layout Subsection*
JMX Architektur
\end_layout

\begin_layout Itemize
<RessourceName>MBean (Interface)
\end_layout

\begin_deeper
\begin_layout Itemize
Schnittstelle des MBeans
\end_layout

\end_deeper
\begin_layout Itemize
<RessourceName (Klasse)
\end_layout

\begin_deeper
\begin_layout Itemize
implementiert das Interface, greift auf Ressource zu
\end_layout

\end_deeper
\begin_layout Itemize
<RessourceName>Agent
\end_layout

\begin_deeper
\begin_layout Itemize
registriert das MBean, announce der Funktionalitäten
\end_layout

\begin_layout Itemize
Klasse registriert sich oft auch selbst
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_10-58-08.png
	width 9cm

\end_inset


\end_layout

\begin_layout Subsection*
Standard MBean
\end_layout

\begin_layout Itemize
Schnittstelle durch Java Interface definiert (definiert in <RessourceName>MBean)
\end_layout

\begin_layout Itemize
einfachster Weg für JMX Instrumentierung
\end_layout

\begin_layout Itemize
statisches Interface
\end_layout

\begin_layout Itemize
exportiert werden public Attribute, Methoden, Konstruktoren und Notifikationen
\end_layout

\begin_layout Itemize
meist als Singleton
\end_layout

\begin_layout Subsection*
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_11-21-59.png
	width 9cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_11-22-21.png
	width 9cm

\end_inset


\end_layout

\begin_layout Subsection*
Dynamic MBean
\end_layout

\begin_layout Itemize
Schnittstellen durch MBeanInfo Klasse definiert
\end_layout

\begin_layout Itemize
Schnittstelle kan zur Runtime verändert werden
\end_layout

\begin_deeper
\begin_layout Itemize
Entwickler hat mehr Kontrolle über Schnittstelle
\end_layout

\end_deeper
\begin_layout Itemize
komplexe Implementierung
\end_layout

\begin_layout Itemize
Mgmt Interafces werden dynamisch zur Runtime erzeugt
\end_layout

\begin_deeper
\begin_layout Itemize
int.
 kann modifiziert werden ohne Codeänderung
\end_layout

\begin_layout Itemize
int.
 kann sich dem Zustand der Ressource anpassen
\end_layout

\end_deeper
\begin_layout Itemize
MBeans implementieren das Interface DynamicMBean
\end_layout

\begin_deeper
\begin_layout Itemize
Methoden get/setAttribute(s), getMBeanInfo und invoke
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_11-45-25.png
	width 8cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_11-45-42.png
	width 8cm

\end_inset


\end_layout

\begin_layout Subsection*
Lokaler Zugriff (programmatisch)
\end_layout

\begin_layout Itemize
Zugriff auf lokales Bean
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_22-07-37.png
	width 10cm

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_22-09-11.png
	width 10cm

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Driekt über Proxy-Instanz
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_22-08-12.png
	width 10cm

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
MBeanServer Method
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_22-08-28.png
	width 10cm

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Remote Zugriff
\end_layout

\begin_layout Standard
Einstellungen für den Remote Zugriff
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-12-30.png
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-09_22-09-31.png
	width 10cm

\end_inset


\end_layout

\begin_layout Section*
Aspekte (Facet/Issue)
\end_layout

\begin_layout Subsection*
Problem
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-25-41.png
	width 10cm

\end_inset


\end_layout

\begin_layout Subsection*
Lösung EJB 2.1
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-27-10.png
	width 12cm

\end_inset


\end_layout

\begin_layout Itemize
deklarative Form: was (aber nicht wie -> dem Container überlassen)
\end_layout

\begin_layout Itemize
Separation von technischen Aspekten
\end_layout

\begin_layout Itemize
zur Runtime konfigurierbar
\end_layout

\begin_layout Itemize
getrennt von Code, schwer wartbar, fehleranfällig
\end_layout

\begin_layout Subsection*
Lösung EJB 3 +
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-28-04.png
	width 8cm

\end_inset


\end_layout

\begin_layout Subsection*
Behandlung
\end_layout

\begin_layout Itemize
Interception (des Aufrufes durch Container)
\end_layout

\begin_deeper
\begin_layout Itemize
Programmfluss wird unterbrochen
\end_layout

\begin_layout Itemize
Before-/After-/Instead-Interception
\end_layout

\end_deeper
\begin_layout Itemize
Dependency Injection
\end_layout

\begin_deeper
\begin_layout Itemize
Container injects reference or value into bean
\end_layout

\begin_layout Itemize
location in code is marked
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-35-54.png
	width 10cm

\end_inset


\end_layout

\begin_layout Section*
Dependency Injection
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-48-10.png
	width 8cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-47-24.png
	width 6cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_13-47-44.png
	width 6cm

\end_inset


\end_layout

\begin_layout Itemize
beliebige ins JNDI eingetragene Resourcen können so verwendet werden: mappedName
=<jndi-name>
\end_layout

\begin_layout Itemize
lokale Resourcen (unter java:comp/env/ im JNDI Verzeichnis) werden ohne
 Präfix referenziert @Resource(mappedName="queue/A")
\end_layout

\begin_layout Itemize
Bekannte Resourcen müssen nicht benannt werden: @Resource SessionContext,
 @Resource TimeService
\end_layout

\begin_layout Itemize
andere Beans können so referenziert werden
\end_layout

\begin_deeper
\begin_layout Itemize
@EJB (mappedName="java:global/Professor/ProfessorSessionBean!myBeans.ProfessorSes
sionBeanRemote")
\end_layout

\end_deeper
\begin_layout Itemize
Lokales Bean mit einem Interface; es wird nach Klasse gesucht, die dieses
 Interface implementiert
\end_layout

\begin_deeper
\begin_layout Itemize
@EJB (beanInterface="myBeans.ProfessorSessionBeanLocal") Professor prof;
\end_layout

\end_deeper
\begin_layout Itemize
nur @EJB steht, wird automatisch nach Bean mit passendem Interface Typ gesucht;
 für Referencen auf local Interfaces
\end_layout

\begin_deeper
\begin_layout Itemize
@EJB ProfessorSessionBeanLocal prof;
\end_layout

\end_deeper
\begin_layout Section*
Java Annotations (neu Java 5 - 1.5)
\end_layout

\begin_layout Itemize
Imperative Programmierung: es wird beschrieben, wie etwas gemacht wird
\end_layout

\begin_layout Itemize
Deklarative Programmierung: es wird beschrieben, was gemacht wird
\end_layout

\begin_layout Itemize
werden von Compiler überprüft (import notwendig)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-43-59.png
	height 1.5cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-44-26.png
	height 1.5cm

\end_inset


\end_layout

\begin_layout Standard
Beispiel:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-46-29.png
	width 6cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-46-56.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-47-20.png
	width 6cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-47-45.png
	height 1.3cm

\end_inset


\end_layout

\begin_layout Standard
Beispiel 2: @Obsolete(reason=Obsolete.Reason.SECURITY)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_11-54-13.png
	width 8cm

\end_inset


\end_layout

\begin_layout Subsection*
Attribute für Annotationen
\end_layout

\begin_layout Itemize
@Target: Art der annotierten Entität Klasse, Methode, …?
\end_layout

\begin_layout Itemize
@Retention: Sichbarkeit der Annotation.
 Compiler oder auch zur Laufzeit?
\end_layout

\begin_layout Itemize
@Documented: Annotation soll Teil der javadoc Dokumentation sein
\end_layout

\begin_layout Itemize
@Inherited: Annotation sind auch für Nachfolge-Entitäten (z.B.
 in der erbenden Klasse) gültig
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="9cm">
<column alignment="left" valignment="top" width="9cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslesen von Annotationen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vor / Nachteile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Class c = MyClass.class; (Relfection)
\end_layout

\begin_layout Plain Layout
Class c = myClass.getClass(); (vorh.
 Instanz)
\end_layout

\begin_layout Plain Layout
Obsolete obsolete = c.getAnnotation(Obsolete.class); System.out.print(obsolete.value(
));
\end_layout

\begin_layout Plain Layout
Method[] methods = c.getDeclaredMethods(); 
\end_layout

\begin_layout Plain Layout
for(Method m : methods) {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

Obsolete obsolete = m.getAnnotation(Obsolete.class); 
\begin_inset Formula $.\quad$
\end_inset

if(obsolete !=null)
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

{ System.out.print(obsolete.value(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorteile:
\end_layout

\begin_layout Itemize
Trennung von Core und System Level Concerns
\end_layout

\begin_layout Itemize
Schritt in Richtung deklarative Programmierung
\end_layout

\begin_layout Itemize
Teil der Java Sprache & von Compiler überpr.
\end_layout

\begin_layout Itemize
Die Abhängigkeiten zur Umgebung können explizit und damit überprüfbar gemacht
 werden
\end_layout

\begin_layout Itemize
Stelle im Code auf die sie wirken
\end_layout

\begin_layout Plain Layout
Nachteile
\end_layout

\begin_layout Itemize
An die Programmquelle gebunden
\end_layout

\begin_layout Itemize
nicht nachträglich ohne Neukompilation geändert werden
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section*
Entity Beans
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_14-52-03.png
	width 10cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-10_14-52-36.png
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="6.5cm">
<column alignment="left" valignment="top" width="6.5cm">
<column alignment="left" valignment="top" width="6.5cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klassen-Name = Tabellen-Name, mit @Table übersteuert
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Entity Manager tracks changes and is responsible for the sync with the DB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mittels Persistence Query Language Abfragen durchgeführt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
import javax.persistence.*; 
\end_layout

\begin_layout Plain Layout
@Entity 
\end_layout

\begin_layout Plain Layout
@Table(name = "Dozenten") 
\end_layout

\begin_layout Plain Layout
public class Dozent implements Serializable { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

private string kurzzeichen; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

private String name; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

private String vorname; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

...
 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public Dozent () {} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public Dozent (....) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

this.id = id; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

...
 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@Id 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public String getKurzzeichen () { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

return kurzzeichen; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public void setKurzzeichen (String id) {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

this.id = id; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@Column(name="FamilienName") 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public String getName () { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

return name; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

// Other getter and setter methods ...
 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@Stateless 
\end_layout

\begin_layout Plain Layout
public class DozentService {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@PersistenceContext (unitName="myprofpu") 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

private EntityManager em; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

....
 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public add (Dozent dozent) {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

em.persist(dozent); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public remove (String id) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

Dozent doz = (Dozent)em.find(Dozent.class,id);
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

em.remove(doz); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public setTelNumber (String id, String telNumber) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

Dozent doz = (Dozent)em.find(Dozent.class,id);
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

doz.setTelNumber(telNumber);
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

// em.flush(); nicht nötig
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
public Collection <Dozent> findByName (String namePattern) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

return em.createQuery( 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

"SELECT p 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

FROM Dozent r 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

WHERE r.name 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

LIKE :name") 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

.setParameter ("name", namePattern) 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

.getResultList(); 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\hfill$
\end_inset


\end_layout

\begin_layout Itemize
SQL angelehnte Syntax
\end_layout

\begin_layout Itemize
Werte von Objekten können "eingeflochten" werden
\end_layout

\begin_layout Itemize
Datenbankunabhängig
\end_layout

\begin_layout Itemize
Platzhalter in Ausdrücken
\end_layout

\begin_layout Itemize
Resultat kann Collection<> sein
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section*
Transactions
\end_layout

\begin_layout Subsection*
Bean Managed Transaction Demarcation (BMTD/JTA)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="8cm">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Itemize
Steuerung über das Java Transaction API (JTA) ermöglicht das Setzen der
 Transaktionsgrenzen (Transaction Demarcation) unabhängig von eigentlichen
 Ressourcen (z.B.
 DB Connections)
\end_layout

\begin_layout Itemize
Der EJB Container übernimmt die Koordination (Transaction Manager) und "kennt"
 alle involvierten Ressourcen (z.B.
 JDBC Connections, EntityManger, etc.) und ruft diese entsprechend auf
\end_layout

\begin_layout Itemize
Der Aufruf über das javax.transaction.UserTransaction Objekt wird vom SessionConte
xt Objekt zur Verfügung gestellt 
\end_layout

\begin_layout Itemize
um BMTD zu verwenden muss die oder Klasse (oder Methode) mit @TransactionManagem
ent(BEAN) annotiert sein
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
import javax.ejb.*; @TransactionManagement(TransactionManagementType.BEAN)
 
\end_layout

\begin_layout Plain Layout
@Stateless 
\end_layout

\begin_layout Plain Layout
public class BankService { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@Resource SessionContext ctx; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

@PersistenceContext EntityManager em; 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

public void transfer(int accA,int accB, double amount){ 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

try { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

UserTransaction utx = ctx.getUserTransaction() 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

utx.begin(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

em.find(Account.class, accId).withdraw(amount); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

em.find(Account.class, accId).deposit(amount); utx.commit(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

} catch (Exception e) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

utx.rollback(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Plain Layout
Folgend: Klient ist anderes EJB oder "echter" Klient (JSF) und kann Transaktion
 steuern, jedoch eher zurückhalten und nie über unzuverlässiges Netzerk
 (Inet)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Probleme
\end_layout

\begin_layout Itemize
"Nested Transaction": EJB kann weiters EJB aufrufen, das ebenfalls eine
 Transaktionsklammer (begin ,commit) gesetzt hat.
 Dieses kann sich sogar auf einer anderen Maschine befinden.
\end_layout

\begin_layout Itemize
Transaktion auf Klientenmaschine gestartet; Klient kann Verbindung verlieren
 oder abstürzen ->DB Locks bleiben gesetzt
\end_layout

\begin_layout Itemize
FAZIT: -> BMTD nur in Ausnahmefällen verwenden (Anfänger am besten gar nicht)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
InitialContext ctx = new InitialContext(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

UserTransaction utx = (UserTransaction)ctx.lookup("java:comp/UserTransaction");
 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

try { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

utx.begin(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

BankService bank = ctx.lookup("sample/BankService");
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

bank.transfer(12323,134343,10.0); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

utx.commit(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} catch (Exception e) { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

try { 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

logger.error("rolling back transaction"); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

utx.rollback(); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

throw new AppException (e); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

} catch (Exception e2) {
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

logger.fatal("error rolling back transaction"); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

throw e2); 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset


\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $.\quad$
\end_inset

} 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Container Managed Transactions Demarcation (CMTD)
\end_layout

\begin_layout Itemize
Container übernimmt Steuerung der Transaktion
\end_layout

\begin_deeper
\begin_layout Itemize
Startet eine Transaktion "bei Bedarf"
\end_layout

\begin_layout Itemize
Stellt das korrekte Verhalten der Transaktion auch im Fehlerfall sicher,
 z.B.
 Rollback
\end_layout

\begin_layout Itemize
Insbesondere Fehlerbehandlung in verteilter Umgebung ist komplex
\end_layout

\end_deeper
\begin_layout Itemize
Zuerst müssen vom EJB Container alle Ressourcen, die an Transaktion beteiligt
 sind bestimmt werden →Transaction Scope
\end_layout

\begin_deeper
\begin_layout Itemize
kein Problem, wenn alle Ressourcen über Container angefordert wurden
\end_layout

\end_deeper
\begin_layout Itemize
Konsequenz
\end_layout

\begin_deeper
\begin_layout Itemize
Bean selber darf die Transaktion nicht mehr selber steuern (z.B.
 ein Commit veranlassen)
\end_layout

\end_deeper
\begin_layout Subsubsection*
Deklarative Transaktionssteuerung
\end_layout

\begin_layout Itemize
EJB gibt Hinweis, wie der Container mit Transaktionen umgehen soll
\end_layout

\begin_layout Itemize
Container übernimmt die eigentliche Steuerung
\end_layout

\begin_layout Itemize
@TransactionManagement(CONTAINER):Die Transaktionsgrenzen (Transaktion Demarcati
on) wird vom Container bestimmt (ist der Default)
\end_layout

\begin_layout Itemize
@TransactionAttribute(...)
\end_layout

\begin_deeper
\begin_layout Itemize
REQUIRED: Eine EJB mit diesem TX-Attribut wird immer in einem TX-Kontext
 ausgeführt.
 Wird ein TX-Kontext vom Clienten mitgegeben, wird dieser genutzt.
 Andernfalls wird ein TX-Kontext durch den EJB-Container erzeugt.
\end_layout

\begin_layout Itemize
SUPPORTS: Ist dieses TX-Attribut gesetzt, kann ein EJB wahlweise mit oder
 ohne TX ausgeführt werden.
 Wird ein TX-Kontext mitgegeben, so wird die gerufene Methode in diesm Kontext
 ausgeführt.
 Der Entwickler ist dafür zuständig, den Code in der EJB entsprechend für
 eine Ausführung mit oder ohne TX zu implementieren
\end_layout

\begin_layout Itemize
NOTSUPPORTED: Bei Aufruf des EJB in einem Transaktionskontext wird die TX
 suspendiert, bis die im EJB gerufene Methode ausgeführt wurde.
 (ohne TX aufgerufen)
\end_layout

\begin_layout Itemize
REQUIRES_NEW: Es wird eine neue TX durch den EJB-Container erzeugt, in der
 die gerufene Methode ausgeführt wird.
 Eine ggf.
 mitgegeben TX wird für die Ausführung der gerufenen Methode suspendiert
 und nach der Ausführung wieder aktiviert.
\end_layout

\begin_layout Itemize
MANDATORY: Ein EJB mit diesem TX-Attribut muss zwingend in einer bestehenden
 TX aufgerufen werden.
 Beim Aufruf ohne mitgegebenem TX-Kontext wird vom EJB-Container eine Transactio
nRequiredException geworfen.
\end_layout

\begin_layout Itemize
NEVER: Es ist nicht zulässig, eine Methode einer mit diesem TX-Attribut
 versehenes EJB mit einem TX-Kontext aufzurufen.
 Geschieht dies doch, wird vom EJB-Container eine RemoteException beim entfernte
n oder eine EJBException beim lokalen Zugriff geworfen.
\end_layout

\end_deeper
\begin_layout Itemize
Fehlerbehandlung
\end_layout

\begin_deeper
\begin_layout Itemize
Falls eine Bedingung in der Anwendungslogik verletzt wird, kann mit setRollbackO
nly ein Rollback der gesamten Transaktion erzwungen werden.
\end_layout

\begin_layout Itemize
Oftmals soll auch eine Exception geworfen werden.
 Wenn eine Exception von einer Klasse die mit @ApplicationException(rollback
 = true) annotiert wurde, geworfen wird, dann kann ebenfalls nur noch Rollback
 ausgeführt werden.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-11_16-19-51.png
	width 8cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-11_16-20-10.png
	width 8cm

\end_inset


\end_layout

\begin_layout Subsection*
Interceptor Definition / Verwendung
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-11_17-13-22.png
	width 10cm

\end_inset


\begin_inset Graphics
	filename /Users/aquila/GitHub/zhaw-zufa/EA/images/2015-01-11_17-13-40.png
	width 10cm

\end_inset


\end_layout

\end_body
\end_document
